name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量检查
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        node-version: [18]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Python 后端检查
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Lint Python code with flake8
      run: |
        # 停止构建如果有Python语法错误或未定义的名称
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 退出零处理所有错误为警告。GitHub编辑器宽度为127个字符
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: black --check .
    
    - name: Import sort check with isort
      run: isort --check-only .
    
    - name: Type check with mypy
      run: mypy . --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        pytest --cov=. --cov-report=xml
      continue-on-error: true
    
    # Node.js 前端检查
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    
    - name: Install frontend dependencies
      run: |
        if [ -d "frontend" ]; then
          cd frontend
          npm ci
        fi
        if [ -d "browser-extension" ]; then
          cd browser-extension
          npm ci
        fi
        if [ -d "desktop-app" ]; then
          cd desktop-app
          npm ci
        fi
    
    - name: Lint frontend code
      run: |
        if [ -d "frontend" ]; then
          cd frontend
          npm run lint
        fi
      continue-on-error: true
    
    - name: Run frontend tests
      run: |
        if [ -d "frontend" ]; then
          cd frontend
          npm run test -- --coverage --watchAll=false
        fi
      continue-on-error: true

  # 构建Docker镜像
  build-images:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
      continue-on-error: true

  # 部署到开发环境
  deploy-dev:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to development
      run: |
        echo "部署到开发环境"
        # 这里可以添加实际的部署脚本
        # 例如：kubectl apply -f k8s/dev/ 或 docker-compose up -d
    
    - name: Run health check
      run: |
        echo "运行健康检查"
        # 添加健康检查脚本
        # curl -f http://dev-api.example.com/health || exit 1

  # 部署到生产环境
  deploy-prod:
    needs: build-images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "部署到生产环境"
        # 这里可以添加实际的部署脚本
        # 例如：kubectl apply -f k8s/prod/ 或 docker-compose -f docker-compose.prod.yml up -d
    
    - name: Run health check
      run: |
        echo "运行健康检查"
        # 添加健康检查脚本
        # curl -f http://api.example.com/health || exit 1
    
    - name: Notify deployment success
      run: |
        echo "部署成功通知"
        # 可以添加通知脚本，如发送邮件、Slack消息等

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # 性能测试
  performance-test:
    needs: deploy-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run performance tests
      run: |
        echo "运行性能测试"
        # 可以使用 k6, Artillery, 或其他性能测试工具
        # k6 run performance-tests/load-test.js
      continue-on-error: true

  # 清理旧的镜像
  cleanup:
    needs: [deploy-dev, deploy-prod]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete old container images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}-backend
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true
    
    - name: Delete old frontend images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}-frontend
        package-type: container
        min-versions-to-keep: 5
        delete-only-untagged-versions: true
      continue-on-error: true